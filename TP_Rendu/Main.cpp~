// ----------------------------------------------
// Informatique Graphique 3D & Réalité Virtuelle.
// Travaux Pratiques
// Algorithmes de Rendu
// Copyright (C) 2015 Tamy Boubekeur
// All rights reserved.
// ----------------------------------------------

#include <iostream>
#include <vector>
#include <string>
#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <cmath>
#include <GL/glut.h>

#include "Vec3.h"
#include "Camera.h"
#include "Mesh.h"
#include "bshnode.h"

using namespace std;

static const unsigned int DEFAULT_SCREENWIDTH = 1024;
static const unsigned int DEFAULT_SCREENHEIGHT = 768;
static const string DEFAULT_MESH_FILE ("models/man.off");

static string appTitle ("Informatique Graphique & Realite Virtuelle - Travaux Pratiques - Algorithmes de Rendu");
static GLint window;
static unsigned int FPS = 0;
static bool fullScreen = false;

static Camera camera;
static Mesh mesh;
static Vec3f lumiere = Vec3f(10, 5, 10);

static BSHNode* bshnode;

void printUsage () {
	std::cerr << std::endl 
		 << appTitle << std::endl
         << "Author: Tamy Boubekeur" << std::endl << std::endl
         << "Usage: ./main [<file.off>]" << std::endl
         << "Commands:" << std::endl 
         << "------------------" << std::endl
         << " ?: Print help" << std::endl
		 << " w: Toggle wireframe mode" << std::endl
         << " <drag>+<left button>: rotate model" << std::endl 
         << " <drag>+<right button>: move model" << std::endl
         << " <drag>+<middle button>: zoom" << std::endl
         << " q, <esc>: Quit" << std::endl << std::endl; 
}

void init (const char * modelFilename) {
    glCullFace (GL_BACK);     // Specifies the faces to cull (here the ones pointing away from the camera)
    glEnable (GL_CULL_FACE); // Enables face culling (based on the orientation defined by the CW/CCW enumeration).
    glDepthFunc (GL_LESS); // Specify the depth test for the z-buffer
    glEnable (GL_DEPTH_TEST); // Enable the z-buffer in the rasterization
	glLineWidth (2.0); // Set the width of edges in GL_LINE polygon mode
    glClearColor (0.0f, 0.0f, 0.0f, 1.0f); // Background color
    glClearColor (0.0f, 0.0f, 0.0f, 1.0f);
    
	mesh.loadOFF (modelFilename);
    camera.resize (DEFAULT_SCREENWIDTH, DEFAULT_SCREENHEIGHT);
    bshnode = new BSHNode(mesh);	
}

void polar2Cartesian (float phi, float theta, float d, float & x, float & y, float & z) {
    x = d*sin (theta) * cos (phi);
    y = d*cos (theta);
    z = d*sin (theta) * sin (phi);
}

void drawGL (BSHNode* noeud) {
    glMatrixMode(GL_MODELVIEW);
    glPushMatrix();
    glTranslatef(noeud->getPosition()[0],noeud->getPosition()[1],noeud->getPosition()[2]);
    //std::cout << noeud->getPosition()[0] << " " << noeud->getPosition()[1] << " " << noeud->getPosition()[2] << std::endl;
    float x, y, z, d;
    d=noeud->getRadius();
    glBegin (GL_TRIANGLES);
    for (float phi = 0 ; phi < 2*M_PI ; phi = phi+0.1) {
	glColor3f(1,0,0);
        polar2Cartesian(phi, M_PI/2, d, x, y ,z);
        glNormal3f (x, y, z);
        glVertex3f(x, y, z);
        polar2Cartesian(phi+0.1, M_PI/2, d, x, y ,z);
        glNormal3f (x, y, z);
        glVertex3f(x, y, z);
        glNormal3f (0, 0, 0);
        glVertex3f(0, 0, 0);
    }/*
    for (float theta = 0 ; theta < M_PI ; theta=theta+0.1) {

        for (float phi = 0; phi < 2*M_PI ; phi=phi+0.1) {

            polar2Cartesian(phi, theta, d, x, y ,z);
            glTexCoord2f(theta/(M_PI), phi/(2*M_PI));
            glNormal3f (x, y, z);
            glVertex3f(x, y, z);

            polar2Cartesian(phi+0.1, theta+0.1, d, x, y ,z);
            glTexCoord2f(theta/(M_PI), phi/(2*M_PI));
            glNormal3f (x, y, z);
            glVertex3f(x, y, z);

            polar2Cartesian(phi+0.1, theta, d, x, y ,z);
            glTexCoord2f(theta/(M_PI), phi/(2*M_PI));
            glNormal3f (x, y, z);
            glVertex3f(x, y, z);

            polar2Cartesian(phi, theta+0.1, d, x, y ,z);
            glTexCoord2f(theta/(M_PI), phi/(2*M_PI));
            glNormal3f (x, y, z);
            glVertex3f(x, y, z);

            polar2Cartesian(phi+0.1, theta+0.1, d, x, y ,z);
            glTexCoord2f(theta/(M_PI), phi/(2*M_PI));
            glNormal3f (x, y, z);
            glVertex3f(x, y, z);

            polar2Cartesian(phi, theta, d, x, y ,z);
            glTexCoord2f(theta/(M_PI), phi/(2*M_PI));
            glNormal3f (x, y, z);
            glVertex3f(x, y, z);
        }
    }*/
    glEnd ();
    glPopMatrix();
}

void renderRecursive (BSHNode* arbre) {
    if (arbre->left()) {
	drawGL(arbre->getLeftChild());
	renderRecursive(arbre->getLeftChild());
    }
    if (arbre->right()) {
	drawGL(arbre->getRightChild());
	renderRecursive(arbre->getRightChild());
    }
}

void drawScene () {
    //renderRecursive(bshnode);
    drawGL(bshnode);
    drawGL(bshnode->getLeftChild());
    drawGL(bshnode->getRightChild());
    glBegin (GL_TRIANGLES);
    for (unsigned int i = 0; i < mesh.T.size (); i++) 
        for (unsigned int j = 0; j < 3; j++) {
            const Vertex & v = mesh.V[mesh.T[i].v[j]];
            // EXERCISE : the following color response shall be replaced with a proper reflectance evaluation/shadow test/etc.
            GLfloat couleur, kd, fd, s, ks, fs, Fi, alpha, F0, D, F, G;
            Vec3f wh, wi, dist;
            kd = 0.5;
            ks = 15;
            s = 2;
            alpha = 20;
            F0 = 0.92;
            camera.getPos(wi);
            wh = normalize(lumiere + wi);
            fd = (kd/M_PI);
            dist = v.p - wi;
            Fi = 1 / (dist.length());
            // BRDF BLINN TRUC
            fs = ks * pow(dot(normalize(v.n), wh), s);

            //MICRO FACETTES
/*            D = (1/(M_PI*pow(alpha, 2)*pow(dot(v.n, wh), 4))) * exp((pow(dot(v.n,wh),2)-1)/(pow(alpha,2)*pow(dot(v.n,wh),2)));
            F = F0 + (1-F0) * pow (1 - max((float)0, dot(wi, wh)), 5);
            G = min((float)1, min(2*dot(v.n, wh)*dot(v.n, wi) / dot(lumiere, wh), 2*dot(v.n, wh)*dot(v.n, lumiere) / dot(lumiere, wh)));
            fs = D*F*G / (4*dot(v.n, wi)*dot(v.n, lumiere));*/

            couleur = Fi * fd * fs * dot(v.n, normalize(wi));
            glColor3f (couleur, couleur, couleur);
            // FIN
            
            glNormal3f (v.n[0], v.n[1], v.n[2]); // Specifies current normal vertex   
            glVertex3f (v.p[0], v.p[1], v.p[2]); // Emit a vertex (one triangle is emitted each time 3 vertices are emitted)
        }
    glEnd (); 
}

void reshape(int w, int h) {
    camera.resize (w, h);
}

void display () {
    glClear (GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    camera.apply (); 
    drawScene ();
    glFlush ();
    glutSwapBuffers (); 
}

void key (unsigned char keyPressed, int x, int y) {
    switch (keyPressed) {
    case 'f':
        if (fullScreen) {
            glutReshapeWindow (camera.getScreenWidth (), camera.getScreenHeight ());
            fullScreen = false;
        } else {
            glutFullScreen ();
            fullScreen = true;
        }      
        break;
    case 'q':
    case 27:
        exit (0);
        break;
    case 'w':
        GLint mode[2];
		glGetIntegerv (GL_POLYGON_MODE, mode);
		glPolygonMode (GL_FRONT_AND_BACK, mode[1] ==  GL_FILL ? GL_LINE : GL_FILL);
        break;
        break;
    default:
        printUsage ();
        break;
    }
}

void mouse (int button, int state, int x, int y) {
    camera.handleMouseClickEvent (button, state, x, y);
}

void motion (int x, int y) {
    camera.handleMouseMoveEvent (x, y);
}

void idle () {
    static float lastTime = glutGet ((GLenum)GLUT_ELAPSED_TIME);
    static unsigned int counter = 0;
    counter++;
    float currentTime = glutGet ((GLenum)GLUT_ELAPSED_TIME);
    if (currentTime - lastTime >= 1000.0f) {
        FPS = counter;
        counter = 0;
        static char winTitle [128];
        unsigned int numOfTriangles = mesh.T.size ();
        sprintf (winTitle, "Number Of Triangles: %d - FPS: %d", numOfTriangles, FPS);
        glutSetWindowTitle (winTitle);
        lastTime = currentTime;
    }
    glutPostRedisplay (); 
}

int main (int argc, char ** argv) {
    if (argc > 2) {
        printUsage ();
        exit (1);
    }
    glutInit (&argc, argv);
    glutInitDisplayMode (GLUT_RGBA | GLUT_DEPTH | GLUT_DOUBLE);
    glutInitWindowSize (DEFAULT_SCREENWIDTH, DEFAULT_SCREENHEIGHT);
    window = glutCreateWindow (appTitle.c_str ());
    init (argc == 2 ? argv[1] : DEFAULT_MESH_FILE.c_str ());
    glutIdleFunc (idle);
    glutReshapeFunc (reshape);
    glutDisplayFunc (display);
    glutKeyboardFunc (key);
    glutMotionFunc (motion);
    glutMouseFunc (mouse);
    printUsage ();
    //display();
    glutMainLoop ();
    return 0;
}

